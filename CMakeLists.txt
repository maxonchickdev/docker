cmake_minimum_required(VERSION 3.15)

set(PROJECT_NAME mydocker2)
project(${PROJECT_NAME} C CXX)

set(CMAKE_CXX_STANDARD 20)

set(WARNINGS_AS_ERRORS OFF)
set(ENABLE_PVS_STUDIO OFF)

set(ENABLE_UBSan OFF)
set(ENABLE_ASAN OFF)
set(ENABLE_TSan OFF)
set(ENABLE_MSAN OFF)

if (NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
endif ()

include(cmake/CompilerWarnings.cmake)

#! Project main executable source compilation
add_executable(${PROJECT_NAME} src/main.cpp src/cgroups_setup.cpp src/user_ns_setup.cpp src/mount_ns_setup.cpp
		src/container.cpp
		src/mydocker.cpp
		src/init.cpp
		src/config_parser.cpp)

#! Put path to your project headers
target_include_directories(${PROJECT_NAME} PRIVATE include)

find_package(Boost 1.71.0 COMPONENTS program_options system REQUIRED)
target_include_directories(${PROJECT_NAME} PRIVATE ${Boost_INCLUDE_DIR})
target_link_libraries(${PROJECT_NAME} Boost::program_options Boost::system)

INSTALL(PROGRAMS
		$<TARGET_FILE:${PROJECT_NAME}> # ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}
		DESTINATION bin)

# Define ALL_TARGETS variable to use in PVS and Sanitizers
set(ALL_TARGETS ${PROJECT_NAME})
set(MNT_PATH "${CMAKE_CURRENT_SOURCE_DIR}/containers")
set(TEMPLATE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/images")
add_compile_definitions(MNT_PATH="${MNT_PATH}")
add_compile_definitions(TEMPLATE_PATH="${TEMPLATE_PATH}")

# Include CMake setup
include(cmake/main-config.cmake)
